package com.semanticsquare.generics;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

/* Notes:
 * Q) How generics are handled under the hood by the compiler?
 * A) The compiler uses the feature called `Type Erasure`
 * */
public class GenericsDemo {
	
	public static void main(String[] args) {		
		Container<String> stringStore = new Store<>();
		stringStore.set("java");
		// stringStore.set(1); // This will throw exception as stringStore accepts only String data type
		System.out.println(stringStore.get()); // Output: Java
		
		Container<Integer> integerStore = new Store<>();
		integerStore.set(1);
		System.out.println(integerStore.get()); // Output: 1
		
		Container<List<Integer>> listStore = new Store<>();
		listStore.set(Arrays.asList(1, 2, 3));
		System.out.println(listStore.get()); // Output: [1, 2, 3]
		
		//Container<int> intStore = new Store<>();
		List<Number> list = new ArrayList<>();
		list.add(new Integer(1));
		list.add(new Double(22.0));
		//list.add(new String("22.0"));
		System.out.println(list); // Output: [1, 22.0]
		
		List[] array = new ArrayList[2];
		array[0] = new ArrayList();
		array[1] = new LinkedList();
	}
}

interface Container<T> {
	void set(T a);
	T get();
}

class Store<T> implements Container<T> {
	private T a;
	
	public void set(T a) {
		this.a = a;
	}
	
	public T get() {
		return a;
	}	
}
