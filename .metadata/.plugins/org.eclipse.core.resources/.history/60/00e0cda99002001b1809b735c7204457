package com.semanticsquare.generics;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

/*Notes:
 *  - Item 23: We should never use a raw type.
 * - Raw type exists to support legacy JAVA.
 * - If we use Raw type Compile time safety is lost.
 * Q) What are the exceptions to use Ray type?
 * A) 1. Only when using Class literals like List.class
 * 	  2. instaceof operator like if(o instanceof Set)
 * */

/* Below class is a demo to show why we should never use a Raw type. */
public class RawTypeDemo{
	
	public static void main(String[] args) {
		/* Below method is a first example for why we shd not use a Raw type. Check the method implementation to see why*/		
		rawTypeTest();		
		
		/* Below is a second example for why we shd not use a Raw type*/
		List<String> strList1 = Arrays.asList("a", "b", "c");
		List<String> strList2 = Arrays.asList("b", "c", "d");
		// getCommonElementsCount(strList1, strList2);		
		
	}
	
	
	public static int getCommonElementsCount(List list1, List list2) {
		int count = 0;
		for (Object element : list1) {
			if (list2.contains(element)) {
				count++;
			}
		}
		System.out.println("Common elements count: " + count);
		return count;
	}
	
	public static void rawTypeTest() {
		System.out.println("\n\nInside rawTypeTest ...");
		int ISBN = 1505297729;
	    List<Double> prices = new ArrayList<>();
	    
	    HalfIntegrator.getPrice(ISBN, prices);
	    Double price = prices.get(0);
	}
	
}

class HalfIntegrator {
	/* Here we are using a raw type List and we are passing List<double> to it and the method is adding an int type to its List. As we are 
	 * using the raw type here compiler is not catching the error while the exception is thrown at run time.
	 * */
	public static void getPrice(int ISBN, List prices) {
		prices.add(45);
	}
	
}
