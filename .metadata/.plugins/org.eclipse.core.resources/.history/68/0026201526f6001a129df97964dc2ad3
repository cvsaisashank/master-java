package com.semanticsquare.io;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class IODemo {
	static String inFileStr = "walden.jpg";
	static String outFileStr = "walden-out.jpg";
	
	public static void fileCopyNoBuffer() {
		System.out.println("\nInside fileCopyNoBuffer ...");
		
		long startTime, elapsedTime; // for speed benchmarking

		// creating an instance of class File to get the file length
		File fileIn = new File(inFileStr);
		// Print file length
		System.out.println("File size is " + fileIn.length() + " bytes");
// Create an instance of fileInputStream and fileOutputStream.
		try (FileInputStream in = new FileInputStream(inFileStr);
				FileOutputStream out = new FileOutputStream(outFileStr)) {
			startTime = System.nanoTime();
			int byteRead;
			// Read a raw byte, returns an int of 0 to 255.
			// Invoke a read method in fileInputStream(in) and return a byte and store in `byteRead`. At the end, if there is nothing to read
			// it returns -1.
			while ((byteRead = in.read()) != -1) {
				// Write the least-significant byte of int, drop the upper 3
				// bytes
				out.write(byteRead);
			}
			elapsedTime = System.nanoTime() - startTime;
			System.out.println("Elapsed Time is " + (elapsedTime / 1000000.0) + " msec");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// Most common way to read byte streams from a file. This reads and writes a group of bytes rather
	// than doing it by a single byte like how the method `fileCopyNoBuffer` does.
	public static void fileCopyWithBufferAndArray() {
		System.out.println("\nInside fileCopyWithBufferAndArray ...");
		
		long startTime, elapsedTime; // for speed benchmarking
		startTime = System.nanoTime();
		// The below coding style is called as a decorator pattern where we are inputing FileInputStream instance to BufferedInputStream.This 
		// decorator pattern is possible because of these classes extending a common superClass.
		// This is also called chaining.
		try (BufferedInputStream in = new BufferedInputStream(new FileInputStream(inFileStr));
				BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outFileStr))) {
			// This variable is used to read or write a group of bytes from input and output stream.. Here, byte array size here is 4000. 
			// Which means, ,maximum 4000 bytes are used to read or write data streams. 
			byte[] byteBuf = new byte[4000];
			int numBytesRead;
			// Here read method is called which accepts an array as an input. 4000 bytes are read from `in` and stored in `numBytesRead`. If there is nothing to read then read() method will return -1.
			while ((numBytesRead = in.read(byteBuf)) != -1) {
				// Invoking the write method on the `BufferedOutputStream`.
				// We are passing the 1) `byteBuf(byte array size which is having 4000bytes)`,
				// 2) offset is 0
				// 3) numBytesRead - number of bytes that has been read which is returned by the read method.
				out.write(byteBuf, 0, numBytesRead);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		elapsedTime = System.nanoTime() - startTime;
		System.out.println("fileCopyWithBufferAndArray: " + (elapsedTime / 1000000.0) + " msec");
	}
	
	private static void readFromStandardInput() {
		System.out.println("\nInside readFromStandardInput ...");
		String data;
	
		System.out.print("Enter \"start\" to continue (Using BufferedReader): ");		
		/*
		 * inputs from console are converted to bytes by `System.in` and then convert those bytes to character using `UTF-8` encoding which is done by `InputStreamReader`.
		 * Then characters are read from BufferReader.
		 * */
		try (BufferedReader in = new BufferedReader(new InputStreamReader(System.in, "UTF-8"))){
			while ((data = in.readLine()) != null && !data.equals("start")) {
				System.out.print("\nDid not enter \"start\". Try again: ");				
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Correct!!");
	}
	
	private static void readFromConsoleUsingScanner() {
		String data;
		System.out.print("\nEnter \"start\" to continue (Using java.util.Scanner): ");		
		Scanner scanner = new Scanner(System.in);
		
		while(!(data = scanner.nextLine()).equals("start")) {
			System.out.print("\nDid not enter \"start\". Try again: ");	
	    }	
		System.out.println("Correct!!");
		
		
		System.out.println("Now, enter the start code: ");
		int code = scanner.nextInt(); // other methods: nextLong, nextDouble, etc
		System.out.println("Thanks. You entered code: " + code);
		
		
		/**
		 * Scanner ~ a text scanner for parsing primitives & string
		 *         ~ breaks its input into tokens using a delimited pattern (default: whitespace)
		 *         ~ when System.in is used, internally constructor uses 
		 *            an InputStreamReader to read from it
		 *         ~ hasXXX & nextXXX can be used together
		 *         ~ InputMismatchException is thrown
		 *         ~ From Java 5 onwards
		 */
		
		Scanner s1 = new Scanner("Hello, How are you?");
		while(s1.hasNext()) {
			System.out.println(s1.next());
		}	
	}
	public static void main(String[] args) {
		
		// fileCopyNoBuffer(); // byte stream example with no buffering
		//fileCopyWithBufferAndArray(); // byte stream example with buffering
		readFromStandardInput(); // character stream example with console input
		readFromConsoleUsingScanner();// read input from console using scanner. 
		System.out.println(System.getProperty("file.encoding")); // UTF-8 is the output.
	}
}