package com.semanticsquare.generics;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/* Notes:
 * - It is recommended to use bounded wildcards to increase API flexibility as per Item 28.
 * Q) When should we use <? extends bound>?
 * A) Parameterized type produces data.
 * Q) When should we use  <? super bound>?
 * A) Parameterized type consumes data.
 * Q) When should we use <?> mean?
 * A) Parameterized type produces data and don't know or care about type argument. It is also called unbound wildcard which default extends Object.
 * Q) When should we use exact match like <T>?
 * A) Parameterized type produces and consumes data.
 * - All the above are also referred to as get and put principle and mnemonic to remember is PECS --> producer-extends, consumer-super
 * Q) Rules to remember for wildcard bounds?
 * A) 
 * Q) When to use BoundedGenericMethod over WildcardBound approach and vice versa?
 * A) If dependencies exist among types of 1 or more method parameters and/or return type, go with  BoundedGenericMethod approach.
 * 		examples: <T> boolean replaceAll(List<T> list, T oldVal, T newVal) , <T> List<T> nCopies(int param1, T param2)
 * 	  Otherwise, in other cases, where the Type parameter is used only once and not in return type, go with WildcardBound approach.
 * 		examples: void display(List<? extends Bookmark> list),  boolean disjoint(Collection<?> c1, Collection<?> c2)
 * 
 * */

public class BoundedWildcardsDemo <T> {
	
	public static void main(String[] args) {
		boundedWildcards();		
	}
	
	static void boundedWildcards() {		
		System.out.println("####### Inside boundedWildcards #########################");
		List<Integer> intList = Arrays.asList(11,21,31);
		display(intList);
		List<Double> doubleList = Arrays.asList(11.5,21.5,31.5);
		display(doubleList);
		
		
		// Pass a List<String> too!!
		List<Number> numList = new ArrayList<>();
		aggregateWithConsumer(intList, doubleList, numList); // here the type inferred is `Number` as Number is the super type of 3 method argument types..
		System.out.println("numList: " + numList);
		
		Collections.addAll(new ArrayList<Object>(), 1, 2);
		Collections.copy(numList, doubleList);
		System.out.println("numList after copy: " + numList);
		System.out.println("Collections.disjoint: " + Collections.disjoint(intList, doubleList));
		
		// Type argument inference is Integer with wildcard type version of replaceAll!
		BoundedWildcardsDemo.replaceAll(numList, 11.5, 44);
		System.out.println("numList: " + numList);	
		
		//ArrayList<Number> numList2 = new ArrayList<>(intList);
	}
	
	/* 
	* - Changing to super will give compiler error as with super 
	*    List<Object> can be passed and here Number is the type in for-loop.
	*    Would work if type in for-loop is changed to Object. Example of this is below in commented code form of display method.
	*  - When we are using `extends`, If we try to consume data by calling add method in the below example we get a compilation error.
	*  - display method is also shown in boundedTypeGenerics in the commented code below 
	 */
	static void display(List<? extends Number> list) {
		for (Number element : list) {
			System.out.println("display()/element: " + element.intValue()); // producing data
		}
		//list.add(22); // consuming data
	}
	
	/* Consuming version of display method. */
    /*static void display(List<? super Number> list) {
		for (Object element : list) {
		System.out.println("display()/element: " + element );
		}
		list.add(22);
	 }*/
	
	/* boundedTypeGenerics version of display method.  */
	/*static <T extends Number> void display(List<T> list) {
	for (Number element : list) {
		System.out.println("display()/element: " + element);
	}
	}*/
	
	/* - Demonstrates exact match as it both produces & consumes data 
	 * - The below param `list` is both producing and consuming data then it should be the exact GenericType.
	 * - The commented replaceAll() method shows how we can write the same using WildcardBounds. But it is not recommended to write in that
	 * way as both producing and consuming is happening within the method. For this reason, it is recommended to go with exact type match.
	 * */
	static <T> boolean replaceAll(List<T> list, T oldVal, T newVal) {
		for (int i = 0; i < list.size(); i++) {
			   if (oldVal.equals(list.get(i)))
			      list.set(i, newVal);
		}
		return true;
	}
	/*static <T> boolean replaceAll(List<? super T> list, T oldVal, T newVal) {
	for (int i = 0; i < list.size(); i++) {
		   if (oldVal.equals(list.get(i)))
		      list.set(i, newVal);
	}
	return true;
	}*/
	static <T extends Number> void replaceTest(List<? super Number> list, T oldVal, T newVal) {
		for (int i = 0; i < list.size(); i++) {
			Number n = (Number)list.get(0);	
			if (n.intValue() == oldVal.intValue()) {
				list.set(i, newVal);
			}
		}		
	}
	static void replaceTest1(List<Number> list, Number oldVal, Number newVal) {
		for (int i = 0; i < list.size(); i++) {
			Number n = list.get(0);	
			if (n.intValue() == oldVal.intValue()) {
				list.set(i, newVal);
			}
		}		
	}
	
	// Invariance workaround ~ For harmless scenarios where type safety is not a concern
	static <T extends Number> void invarianceWorkaround(List<T> list, T element) {
		//list.add(new Double(23.3));
		
		// T element = (T) new Double(23.3); // typically element of type T will be a method parameter
		list.add(element);
	}
		
	// This highlights the difference from above generic method. This version
	// does not even allow invocation of add method (only way is to use helper method)
	static <T> void invarianceWorkaroundWithWildcard(List<? extends T> list , T element) {
		//list.add(new Double(23.3));
			
		//T element = (T) new Double(23.3); // typically element of type T will be a method parameter
		//list.add(element);
	}
	
	static void invarianceWorkaround2(List<? extends Number> list) {
		//list.add(new Double(23.3));
		// capture(list);
	}
	/*
	static <T> void capture(List<T> list) {
		T element = (T) new Double(23.3);
		list.add(element);
	}*/
	
	
	
	/* Item 28: If Type parameter will be used only once, then go with wildcard approach like the aggregateWithConsumer method.
	*             Replace unbounded type parameter with unbounded wildcard.
	*  - aggregateWithConsumer2() method is shown on how to write the same using BoundedGenericMethod. But for this case, it is better to
	*   use aggregateWithConsumer() method which uses WildcardBounds because it uses Type parameter only once and not in the return part
	*   of the method. It also gives clarity to the readers with `extends` and `super` keywords on what we can do with each argument. 
	*  -    Renaming to aggregate leads to compiler error due to type erasure
	*  -    e.g., l1 --> List<Integer>, l2 --> List<Double>, l3 --> List<Number>   
	*/
	public static <E> void aggregateWithConsumer(List<? extends E> l1, 
			List<? extends E> l2, List<? super E> l3) {
		l3.addAll(l1); // As we are consuming data on l3, `super` is used here.
		l3.addAll(l2);
	}
	/* aggregateWithConsumer method in BoundedGenericMethod form. Just replace with unbounded type parameter with unbounded wildcard to
	 * convert it use WildcardBound like above aggregateWithConsumer() method.
	 * */
	public static <E3, E1 extends E3, E2 extends E3> void aggregateWithConsumer2(List<E1> l1, 
			List<E2> l2, List<E3> l3) {
		l3.addAll(l1);
		l3.addAll(l2);
	}
}